knitr::opts_chunk$set(echo = TRUE)
suppressWarnings({ # Para no manchar la salida.
library(ggplot2)
library(dplyr)
library(GGally)
library(caret)
library(RANN)
library(e1071)
library(randomForest)
library(nnet)
})
credit = read.table("crx.data", sep = ",",na.strings = "?")
head(credit)
credit["V1"] = lapply(credit["V1"], FUN = as.factor)
credit["V2"] = lapply(credit["V2"], FUN = as.numeric)
credit["V3"] = lapply(credit["V3"], FUN = as.numeric)
credit["V4"] = lapply(credit["V4"], FUN = as.factor)
credit["V5"] = lapply(credit["V5"], FUN = as.factor)
credit["V6"] = lapply(credit["V6"], FUN = as.factor)
credit["V7"] = lapply(credit["V7"], FUN = as.factor)
credit["V8"] = lapply(credit["V8"], FUN = as.numeric)
credit["V9"] = lapply(credit["V9"], FUN = as.factor)
credit["V10"] = lapply(credit["V10"], FUN = as.factor)
credit["V11"] = lapply(credit["V11"], FUN = as.numeric)
credit["V12"] = lapply(credit["V12"], FUN = as.factor)
credit["V13"] = lapply(credit["V13"], FUN = as.factor)
credit["V14"] = lapply(credit["V14"], FUN = as.numeric)
credit["V15"] = lapply(credit["V15"], FUN = as.numeric)
credit["V16"] = lapply(credit["V16"], FUN = as.factor)
head(credit)
levels(credit$V4)<-c(levels(credit$V4),"t")
head(credit$V4)
head(credit)
summary(credit)
str(credit)
levels(credit$V1)
prop.table(table(credit$V1))*100
ggplot(credit, aes(x = V2)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histograma de credit$V2", x = "Valores de V2", y = "Frecuencia") +
theme_minimal()
myhist = ggplot(data=na.omit(credit),aes(V3)) +
geom_histogram(col="orange",fill="orange",alpha=0.2) +
labs(title="Histograma para V3", y="Count")
myhist = myhist + geom_vline(xintercept = mean(credit$V3),
col="blue",linetype="dashed")
myhist = myhist + geom_vline(xintercept = median(credit$V3),
col="red",linetype="dashed")
myhist
levels(credit$V4)
prop.table(table(credit$V4))*100
levels(credit$V5)
prop.table(table(credit$V5))
levels(credit$V6)
prop.table(table(credit$V6))*100
levels(credit$V7)
prop.table(table(credit$V7))*100
ggplot(credit, aes(x = V8)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histograma de credit$V8", x = "Valores de V8", y = "Frecuencia") +
theme_minimal()
levels(credit$V9)
levels(credit$V10)
prop.table(table(credit$V10))*100
ggplot(credit, aes(x = V11)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V11", x = "V11(original)", y = "Frecuencia") +
theme_minimal()
levels(credit$V12)
prop.table(table(credit$V12))*100
levels(credit$V13)
ggplot(credit, aes(x = V14)) +
geom_histogram(binwidth = 14, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histograma de credit$V14", x = "Valores de V14", y = "Frecuencia") +
theme_minimal()
ggplot(credit, aes(x = V15)) +
geom_histogram( fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histograma de V15", x = "Valores de V15", y = "Frecuencia") +
theme_minimal()
levels(credit$V16)
summary(credit$V2)
myhist = ggplot(data = na.omit(credit), aes(V2)) +
geom_histogram(binwidth = 0.5, col = "orange", fill = "orange", alpha = 0.2) +
labs(title = "Histograma para V2", y = "Count") +
geom_vline(xintercept = mean(na.omit(credit$V2)), col = "blue", linetype = "dashed") +
geom_vline(xintercept = median(na.omit(credit$V2)), col = "red", linetype = "dashed")
myhist
myplot = ggplot(data=na.omit(credit),aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
myplot
summary(credit$V3)
myhist=ggplot(data=credit, aes(x = V3)) +
geom_histogram(col = "orange", fill = "orange", alpha = 0.2,
breaks = seq(0, 30, by = 1)) +
labs(title = "Histograma para el análisis de la variable V3", y = "Count")
# Marca el valor de la media con una línea azul vertical
myhist <- myhist + geom_vline(xintercept = mean(credit$V3),
col = "blue", linetype = "dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist <- myhist + geom_vline(xintercept = median(credit$V3),
col = "red", linetype = "dashed")
myhist
ggplot(credit, aes(sample = V3)) +
stat_qq() +
stat_qq_line(color = "blue", linetype = "dashed") +
labs(title = "Diagrama Q-Q de V3", x = "Cuantiles Teóricos", y = "Cuantiles Muestrales")
summary(credit$V8)
myhist = ggplot(data=credit, aes(x = V8)) +
geom_histogram(col="orange", fill="orange", alpha=0.2,
breaks=seq(0, 30, by=1)) +
labs(title="Histograma para el análisis de la variable V8", y="Count")
# Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V8),
col="blue", linetype="dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist = myhist + geom_vline(xintercept = median(credit$V8),
col="red", linetype="dashed")
# Mostrar el histograma
myhist
ggplot(data = credit, aes(sample = V8)) +
ggtitle("QQ plot para variable V8") +
stat_qq() +
stat_qq_line() +
xlab("Distribución teórica") +
ylab("Distribución muestral")
ggpairs(na.omit(credit), columns = c("V2", "V3", "V8","V14","V15", "V16")
,aes(color = V16, alpha = 0.6), title = "Análisis Multivariable de V2 V3 V8 V14 Y V15")
Q1=quantile(na.omit(credit$V2),0.25)
Q3=quantile(na.omit(credit$V2),0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicos=na.omit(credit$V2)[na.omit(credit$V2)<limiteInferior | na.omit(credit$V2)>limiteSuperior]
percAtipicos=100*length(atipicos)/length((na.omit(credit$V2)))
print(paste("El porcentaje de datos atípicos para V2 es = ",percAtipicos))
Q1=quantile(na.omit(credit$V3),0.25)
Q3=quantile(na.omit(credit$V3),0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicos=na.omit(credit$V3)[na.omit(credit$V3)<limiteInferior | na.omit(credit$V3)>limiteSuperior]
percAtipicos=100*length(atipicos)/length((na.omit(credit$V3)))
print(paste("El porcentaje de datos atípicos para V3 es = ",percAtipicos))
Q1=quantile(na.omit(credit$V14),0.25)
Q3=quantile(na.omit(credit$V14),0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicos=na.omit(credit$V14)[na.omit(credit$V14)<limiteInferior | na.omit(credit$V14)>limiteSuperior]
percAtipicos=100*length(atipicos)/length((na.omit(credit$V14)))
print(paste("El porcentaje de datos atípicos para V14 es = ",percAtipicos))
Q1=quantile(na.omit(credit$V8),0.25)
Q3=quantile(na.omit(credit$V8),0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicos=na.omit(credit$V8)[na.omit(credit$V8)<limiteInferior | na.omit(credit$V8)>limiteSuperior]
percAtipicos=100*length(atipicos)/length((na.omit(credit$V8)))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V8)) +
geom_histogram(bins = 30, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Histograma de V8 original", x = "V8 (original)", y = "Frecuencia")
ggplot(credit, aes(y = V8)) +
geom_boxplot(fill = "skyblue", color = "darkblue", outlier.color = "red", outlier.shape = 16) +
labs(title = "Boxplot de V8", y = "V8", x = "") +
theme_minimal()
Q1=quantile(na.omit(credit$V11),0.25)
Q3=quantile(na.omit(credit$V11),0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicos=na.omit(credit$V11)[na.omit(credit$V11)<limiteInferior | na.omit(credit$V11)>limiteSuperior]
percAtipicos=100*length(atipicos)/length((na.omit(credit$V11)))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V11)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V11", x = "V11(original)", y = "Frecuencia") +
theme_minimal()
ggplot(credit, aes(y = V11)) +
geom_boxplot(fill = "skyblue", color = "darkblue", outlier.color = "red", outlier.shape = 16) +
labs(title = "Boxplot de V11", y = "V11", x = "") +
theme_minimal()
Q1=quantile(na.omit(credit$V15),0.25)
Q3=quantile(na.omit(credit$V15),0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicos=na.omit(credit$V15)[na.omit(credit$V15)<limiteInferior | na.omit(credit$V15)>limiteSuperior]
percAtipicos=100*length(atipicos)/length((na.omit(credit$V15)))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V15)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V15", x = "V15", y = "Frecuencia") +
theme_minimal()
ggplot(credit, aes(y = V15)) +
geom_boxplot(fill = "skyblue", color = "darkblue", outlier.color = "red", outlier.shape = 16) +
labs(title = "Boxplot de V15", y = "V15", x = "") +
theme_minimal()
credit.trainIdx<-readRDS("credit.trainIdx")
credit.Datos.Train<-credit[credit.trainIdx,]
credit.Datos.Test<-credit[-credit.trainIdx,]
nrow(credit.Datos.Train)
nrow(credit.Datos.Train[!complete.cases(credit.Datos.Train),])
symnum(cor(credit.Datos.Train[, sapply(credit.Datos.Train, is.numeric)], use = "complete.obs"))
preproc <- preProcess(credit.Datos.Train[, sapply(credit.Datos.Train, is.numeric)], method = "medianImpute")
credit_num_imputed <- predict(preproc, credit.Datos.Train[, sapply(credit.Datos.Train, is.numeric)])
sum(is.na(credit_num_imputed))
credit.Datos.Train[, sapply(credit.Datos.Train, is.numeric)] <- credit_num_imputed
imputar_moda <- function(x) {
if (is.factor(x) || is.character(x)) {
moda <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- moda
}
return(x)
}
credit.Datos.Train <- data.frame(lapply(credit.Datos.Train, imputar_moda))
nrow(credit.Datos.Train[!complete.cases(credit.Datos.Train),])
credit.Datos.Train[!complete.cases(credit.Datos.Train),]
credit.Datos.Test[!complete.cases(credit.Datos.Test),]
nearZeroVar(credit.Datos.Train)
symnum(cor(credit.Datos.Train[, sapply(credit.Datos.Train, is.numeric)]))
credit.Datos.Train.Normalizados=credit.Datos.Train
preproc <- preProcess(credit.Datos.Train.Normalizados[, c("V8", "V11", "V15")], method = c("center", "scale"),
center = apply(credit.Datos.Train[, c("V8", "V11", "V15")], 2, median),
scale = apply(credit.Datos.Train[, c("V8", "V11", "V15")], 2, IQR))
credit.Datos.Train.Normalizados[, c("V8", "V11", "V15")] <- predict(preproc, credit.Datos.Train.Normalizados[, c("V8", "V11", "V15")])
head(credit.Datos.Train.Normalizados[, c("V8", "V11", "V15")])
credit.Datos.Train.Normalizados$V2=log1p(credit.Datos.Train.Normalizados$V2)
credit.Datos.Train.Normalizados$V3=log1p(credit.Datos.Train.Normalizados$V3)
credit.Datos.Train.Normalizados$V14=log1p(credit.Datos.Train.Normalizados$V14)
min_max_normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
credit.Datos.Train.Normalizados$V2=min_max_normalize(credit.Datos.Train.Normalizados$V2)
credit.Datos.Train.Normalizados$V3=min_max_normalize(credit.Datos.Train.Normalizados$V3)
credit.Datos.Train.Normalizados$V14=min_max_normalize(credit.Datos.Train.Normalizados$V14)
summary(credit.Datos.Train.Normalizados[, c("V2", "V3", "V14")])
credit.Datos.Test.Normalizados=credit.Datos.Test
credit.Datos.Test.Normalizados$V2=log1p(credit.Datos.Test.Normalizados$V2)
credit.Datos.Test.Normalizados$V3=log1p(credit.Datos.Test.Normalizados$V3)
credit.Datos.Test.Normalizados$V14=log1p(credit.Datos.Test.Normalizados$V14)
credit.Datos.Test.Normalizados$V2=min_max_normalize(credit.Datos.Test.Normalizados$V2)
credit.Datos.Test.Normalizados$V3=min_max_normalize(credit.Datos.Test.Normalizados$V3)
credit.Datos.Test.Normalizados$V14=min_max_normalize(credit.Datos.Test.Normalizados$V14)
#Utilizamos la variable 'prepoc' creada anteriormente con los datos de TRAIN para evitar peeking
credit.Datos.Test.Normalizados[, c("V8", "V11", "V15")] <- predict(preproc, credit.Datos.Test.Normalizados[, c("V8", "V11", "V15")])
predictors <- credit.Datos.Train[, -which(names(credit.Datos.Train) == "V16")]
target <- credit.Datos.Train$V16
rf_model <- randomForest(x = predictors, y = target, importance = TRUE)
importance_rf <- importance(rf_model)
varImpPlot(rf_model)
credit.Datos.Train.Rf=credit.Datos.Train
credit.Datos.Train.Rf <- credit.Datos.Train.Rf[, !(names(credit.Datos.Train.Rf) %in% c("V1", "V12", "V4"))]
credit.Datos.Train.Rf$V2=log1p(credit.Datos.Train.Rf$V2)
credit.Datos.Train.Rf$V3=log1p(credit.Datos.Train.Rf$V3)
credit.Datos.Train.Rf$V8=log1p(credit.Datos.Train.Rf$V8)
credit.Datos.Train.Rf$V11=log1p(credit.Datos.Train.Rf$V11)
credit.Datos.Train.Rf$V14=log1p(credit.Datos.Train.Rf$V14)
credit.Datos.Train.Rf$V15=log1p(credit.Datos.Train.Rf$V15)
ggplot(credit.Datos.Train, aes(x = V2)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Histograma de V2", x = "V2", y = "Frecuencia") +
theme_minimal()
credit.Datos.Test.Rf=credit.Datos.Test
credit.Datos.Test.Rf <- credit.Datos.Test.Rf[, !(names(credit.Datos.Test.Rf) %in% c("V1", "V12", "V4"))]
credit.Datos.Test.Rf$V2=log1p(credit.Datos.Test.Rf$V2)
credit.Datos.Test.Rf$V3=log1p(credit.Datos.Test.Rf$V3)
credit.Datos.Test.Rf$V8=log1p(credit.Datos.Test.Rf$V8)
credit.Datos.Test.Rf$V11=log1p(credit.Datos.Test.Rf$V11)
credit.Datos.Test.Rf$V14=log1p(credit.Datos.Test.Rf$V14)
credit.Datos.Test.Rf$V15=log1p(credit.Datos.Test.Rf$V15)
set.seed(1234)
control <- trainControl(method = "cv", number = 10)
modelo_rf_cv <- train(
V16 ~ .,
data = credit.Datos.Train.Rf,
method = "rf",
trControl = control,
tuneLength = 5
)
print(modelo_rf_cv)
predicciones <- predict(modelo_rf_cv, newdata = credit.Datos.Test.Rf)
confusionMatrix(predicciones, credit.Datos.Test.Rf$V16)
set.seed(1234)
modelo_nnet <- train(
V16 ~ .,
data = credit.Datos.Train.Normalizados,
method = "nnet",
trControl = control,
tuneLength = 5,
trace = FALSE
)
print(modelo_nnet)
predicciones <- predict(modelo_nnet, credit.Datos.Test.Normalizados)
confusionMatrix(predicciones, credit.Datos.Test$V16)
modelLookup(("nnet"))
grid <- expand.grid(
size = c(1, 3, 5, 7),
decay = c(1e-05, 1e-04, 1e-03, 1e-02)
)
resultados <- data.frame(size = numeric(),
decay = numeric(),
precision_test = numeric())
for (i in 1:nrow(grid)) {
size <- grid$size[i]
decay <- grid$decay[i]
set.seed(123)
modelo_nnet <- train(
V16 ~ .,
data = credit.Datos.Train,
method = "nnet",
trControl = control,
tuneGrid = expand.grid(size = size, decay = decay),
trace = FALSE
)
predicciones <- predict(modelo_nnet, newdata = credit.Datos.Test)
conf_matrix <- confusionMatrix(predicciones, credit.Datos.Test$V16)
precision_test <- conf_matrix$overall["Accuracy"]
resultados <- rbind(resultados, data.frame(size = size, decay = decay, precision_test = precision_test))
}
resultados <- resultados[order(-resultados$precision_test), ]
print(resultados)
mejores_parametros <- resultados[1, ]
size_mejor <- mejores_parametros$size
decay_mejor <- mejores_parametros$decay
set.seed(123)
nnet_tuned <- train(
V16 ~ .,
data = credit.Datos.Train,
method = "nnet",
trControl = control,
tuneGrid = expand.grid(size = size_mejor, decay = decay_mejor),
trace = FALSE
)
predicciones_final <- predict(nnet_tuned, newdata = credit.Datos.Test)
confusionMatrix(predicciones_final, credit.Datos.Test$V16)
set.seed(1234)
knn_model <- train(
V16 ~ .,
data = credit.Datos.Train.Normalizados,
method = "knn",
trControl = control,
tuneLength = 10
)
knn_predictions <- predict(knn_model, newdata = credit.Datos.Test.Normalizados)
confusionMatrix(knn_predictions, credit.Datos.Test.Normalizados$V16)
plot(knn_model)
set.seed(1234)
suppressWarnings({
gbm_model_original <- train(
V16 ~ .,
data = credit.Datos.Train.Normalizados,
method = "gbm",
trControl = control,
tuneLength = 5,
verbose = FALSE
)})
print(gbm_model_original)
gbm_predictions <- predict(gbm_model_original, newdata = credit.Datos.Test.Normalizados)
confusionMatrix(gbm_predictions, credit.Datos.Test.Normalizados$V16)
importancia_directa <- summary(gbm_model_original$finalModel)
credit.Datos.Train.gbm = credit.Datos.Train
credit.Datos.Test.gbm = credit.Datos.Test
credit.Datos.Train.gbm <- credit.Datos.Train.gbm[, !colnames(credit.Datos.Train.gbm) %in% c("V4", "V6", "V13")]
credit.Datos.Test.gbm <- credit.Datos.Test.gbm[, !colnames(credit.Datos.Test.gbm) %in% c("V4", "V6", "V13")]
set.seed(1234)
suppressWarnings({
gbm_model <- train(
V16 ~ .,
data = credit.Datos.Train.gbm,
method = "gbm",
trControl = control,
tuneLength = 5,
verbose = FALSE
)})
print(gbm_model)
gbm_predictions <- predict(gbm_model, newdata = credit.Datos.Test.gbm)
confusionMatrix(gbm_predictions, credit.Datos.Test.gbm$V16)
preprocess <- preProcess(credit.Datos.Train.gbm, method = "range")
credit.Datos.Train.gbm.normalizado <- predict(preprocess, credit.Datos.Train.gbm)
credit.Datos.Test.gbm.normalizado <- predict(preprocess, credit.Datos.Test.gbm)
summary(credit.Datos.Test.gbm.normalizado)
set.seed(1234)
gbm_model <- train(
V16 ~ .,
data = credit.Datos.Train.gbm.normalizado,
method = "gbm",
trControl = control,
tuneLength = 5,
verbose = FALSE
)
gbm_predictions <- predict(gbm_model, newdata = credit.Datos.Test.gbm.normalizado)
confusionMatrix(gbm_predictions, credit.Datos.Test.gbm.normalizado$V16)
modelLookup(("gbm"))
tune_grid <- expand.grid(
n.trees = c(90, 100, 110),
interaction.depth = c(2, 3, 4),
shrinkage = c(0.08, 0.1, 0.12),
n.minobsinnode = c(8, 10, 12)
)
control <- trainControl(method = "cv", number = 10)
set.seed(1234)
gbm_tuned <- train(
V16 ~ .,
data = credit.Datos.Train.gbm.normalizado,
method = "gbm",
trControl = control,
tuneGrid = tune_grid,
verbose = FALSE
)
plot(gbm_tuned)
gbm_predictions <- predict(gbm_tuned, newdata = credit.Datos.Test.gbm.normalizado)
confusionMatrix(gbm_predictions, credit.Datos.Test.gbm.normalizado$V16)
resultados <- resamples(list(
KNN = knn_model,
GBM = gbm_model_original,
GBM_tuned = gbm_tuned,
NNET = modelo_nnet,
NNET_tuned = nnet_tuned,
RandomForest = modelo_rf_cv
))
bw_plot <- bwplot(resultados, metric = "Kappa", main = "Boxplot - Kappa")
density_plot <- densityplot(resultados, metric = "Accuracy", main = "Density Plot - Accuracy")
density_plot_kappa <- densityplot(resultados, metric = "Kappa", main = "Density Plot - Kappa")
dot_plot <- dotplot(resultados, metric = "Accuracy", main = "Dotplot - Accuracy")
gridExtra::grid.arrange(bw_plot, density_plot, ncol = 2)
gridExtra::grid.arrange(density_plot_kappa, dot_plot, ncol = 2)
